// Utility function to get an element by ID
const wcID = (id) => document.getElementById(id);

// Encode the current window location URL for use in requests
const wcU = encodeURIComponent(window.location.href);

// Function to make a new request to the Website Carbon API
const newRequest = function(updateLocalStorage = true) {
    // Fetch data from the Website Carbon API for the current URL
    fetch("https://api.websitecarbon.com/b?url=" + wcU)
        .then((response) => {
            // Check if the response is OK; if not, throw an error
            if (!response.ok) throw Error(response);
            return response.json(); // Parse JSON from the response
        })
        .then((data) => {
            // Render the result if the flag is set to true
            if (updateLocalStorage) renderResult(data);
            // Add a timestamp to the data and save it in localStorage
            data.t = (new Date).getTime();
            localStorage.setItem("wcb_" + wcU, JSON.stringify(data));
        })
        .catch((error) => {
            // Display 'No Result' in the widget and log the error
            wcID("wcb_g").innerHTML = "No Result";
            console.log(error);
            // Remove any saved data for this URL from localStorage
            localStorage.removeItem("wcb_" + wcU);
        });
};

// Function to render the result in HTML elements
const renderResult = function(data) {
    // Display the CO2 emissions in grams in the element with ID 'wcb_g'
    wcID("wcb_g").innerHTML = data.c + "g of CO<sub>2</sub>/view";
    // Append the text showing the page's cleanliness rank to the element with ID 'wcb_2'
    wcID("wcb_2").insertAdjacentHTML("beforeEnd", "Cleaner than " + data.p + "% of pages tested");
};

// CSS styling for the Website Carbon widget
const wcC = `
<style>
    #wcb.carbonbadge {
        --b1: #0e11a8;
        --b2: #00ffbc;
        font-size: 15px;
        text-align: center;
        color: var(--b1);
        line-height: 1.15;
    }
    #wcb.carbonbadge sub {
        vertical-align: middle;
        position: relative;
        top: .3em;
        font-size: .7em;
    }
    #wcb #wcb_2, #wcb #wcb_a, #wcb #wcb_g {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-size: 1em;
        line-height: 1.15;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        text-decoration: none;
        margin: .2em 0;
    }
    #wcb #wcb_a, #wcb #wcb_g {
        padding: .3em .5em;
        border: .13em solid var(--b2);
    }
    #wcb #wcb_g {
        border-radius: .3em 0 0 .3em;
        background: #fff;
        border-right: 0;
        min-width: 8.2em;
    }
    #wcb #wcb_a {
        border-radius: 0 .3em .3em 0;
        border-left: 0;
        background: var(--b1);
        color: #fff;
        font-weight: 700;
        border-color: var(--b1);
    }
    #wcb.wcb-d #wcb_a {
        color: var(--b1);
        background: var(--b2);
        border-color: var(--b2);
    }
    #wcb.wcb-d #wcb_2 {
        color: #fff;
    }
</style>`;

// Get the widget container element by its ID
const wcB = wcID("wcb");

// Check if the fetch API is supported by the browser
if ("fetch" in window) {
    // Insert the CSS styling for the widget
    wcB.insertAdjacentHTML("beforeEnd", wcC);
    // Insert the HTML structure for the widget with placeholders
    wcB.insertAdjacentHTML("beforeEnd", `
        <div id="wcb_p">
            <span id="wcb_g">Measuring CO<sub>2</sub>&hellip;</span>
            <a id="wcb_a" target="_blank" rel="noopener" href="https://websitecarbon.com">Website Carbon</a>
        </div>
        <span id="wcb_2">&nbsp;</span>
    `);

    // Attempt to load cached data for this URL from localStorage
    let cachedData = localStorage.getItem("wcb_" + wcU);
    const currentTime = (new Date).getTime();

    // Check if cached data exists
    if (cachedData) {
        // Parse the cached data and render it
        const parsedData = JSON.parse(cachedData);
        renderResult(parsedData);

        // If the cached data is more than a day old, refresh it
        if (currentTime - parsedData.t > 864e5) newRequest(false);
    } else {
        // If no cached data exists, make a new API request
        newRequest();
    }
}
